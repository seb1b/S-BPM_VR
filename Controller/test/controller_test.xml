<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="controller_" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="-0.01 0.01 10" at="-0.01 0.01 9" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" accept_root="1" near="0.1" far="250" aspect="1" fov="0.2">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" occlusion_culling="0" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	def beispiel1():
		cam = VR.getRoot().find('Default')
	
		path = VR.Path()
		path.set([0,0,20],[0,0,1],[0,1,0], [0,0,30],[0,0,1],[0,1,0], 80)
	
		cam.animate(path, 2, 0, False)
		
	def fly(t):
		cam = VR.getRoot().find('Default')
		p = [0,0,20+t*10]
		cam.setFrom(p)
		
	a = VR.Animation('fly')
	a.setCallback(fly)
	a.setDuration(2)
	
	a.start()
</core>
    </Script>
    <Script name_suffix="2" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	HANDLE = VR.Geometry('handle')
	HANDLE.setPrimitive('Box 0.03 0.03 0.03 1 1 1')
	
	mes = VR.Geometry('mes')
	mes.setPrimitive('Box 0.2 0.1 0.2 1 1 1')
	mes.setFrom(0.4, 0, 0)
	mes.setPickable(True)
#	mes.setPickable(False)

	sub = VR.Geometry('sub')
	sub.setPrimitive('Box 0.2 0.2 0.2 1 1 1')
	sub.setFrom(0, 0.4, 0)
	sub.setPickable(True)
#	sub.setPickable(False)
				
	VR.view_root.addChild(mes)
	VR.view_root.addChild(sub)
	
	VR.ptool = VR.Pathtool()
	#ptool.setHandleGeometry(HANDLE)
	paths = []

	paths.append(VR.ptool.newPath(None, VR.view_root))
	handles = VR.ptool.getHandles(paths[-1])
	assert len(handles) == 2, "invalid number of handles"
	handles[0].setDir(0, 1, 0.0)
	handles[0].setPickable(False)
#	handles[0].setPickable(True)
	sub.addChild(handles[0])
#	handles[0].addChild(sub)
	handles[1].setDir(1.0, 0.0, 0.0)
	handles[1].setPickable(False)
#	handles[1].setPickable(True)
	mes.addChild(handles[1])
#	handles[1].addChild(mes)
	
	VR.ptool.update()
	
</core>
    </Script>
    <Script name_suffix="3" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	mes = VR.loadGeometry('../../View/Blender/Prozess/Message_Hashtag.dae')
	mes.setScale(0.1, 0.1, 0.1)
	mes.setPose([0, 0, 0], [0, 1, 0], [0, 0, 1])
	VR.view_root.addChild(mes)
</core>
    </Script>
    <Script name_suffix="0" base_name="behaviorAdd" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			body {
				margin: 0;
				border-style: inset;
				border-width: 2px;
				padding: 10px;
				background-color: white;
			}
			
			.addDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}
			
			.addItemsDiv{
				min-height: 100px;
				min-width: 100px;
				height: 100%;
				background-repeat: no-repeat;
				background-size: 80% auto;
				background-position: center;
				display: table-cell;
				text-align: center;
				vertical-align: middle;
				font-size: 16px; 
				font-size: 3vw;
			}

			div:first-child:nth-last-child(1) {
				height: 100%;
			}

			/* two items */
			.addItemsDiv:first-child:nth-last-child(2),
			.addItemsDiv:first-child:nth-last-child(2) ~ .addItemsDiv {
				width: 50%;
			}

			/* three items */
			.addItemsDiv:first-child:nth-last-child(3),
			.addItemsDiv:first-child:nth-last-child(3) ~ .addItemsDiv {
				width: 33.3333%;
			}

			/* four items */
			.addItemsDiv:first-child:nth-last-child(4),
			.addItemsDiv:first-child:nth-last-child(4) ~ .addItemsDiv {
				width: 25%;
			}

			/* Five items */
			.addItemsDiv:first-child:nth-last-child(5),
			.addItemsDiv:first-child:nth-last-child(5) ~ .addItemsDiv {
				width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Add&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="addDiv"&gt;
			&lt;div id="functionState" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/fState.png)"&gt;Function&lt;br/&gt;State&lt;/div&gt;
			&lt;div id="receiveState" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/rState.png)"&gt;Receive&lt;br/&gt;State&lt;/div&gt;
			&lt;div id="sendState" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/sState.png)"&gt;Send&lt;br/&gt;State&lt;/div&gt;
			&lt;div id="transition" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/transition.png)"&gt;Transition&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {				
			websocket.send(element.id);
			alert(element.id);
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="debug_keyboard" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	assert hasattr(VR, "controller")

	k = dev.getKey()
	print("dev.getKey(): %i") % k
	if k == 65361:  # left arrow
		VR.controller.move_model([0.1, 0.0, 0.0], 0)
	if k == 65362:  # up arrow
		VR.controller.move_model([0.0, -0.1, 0.0], 0)
	if k == 65363:  # right arrow
		VR.controller.move_model([-0.1, 0.0, 0.0], 0)
	if k == 65364:  # down arrow
		VR.controller.move_model([0.0, 0.1, 0.0], 0)
	if k == 102:  # F
		VR.controller.fade_away()
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="-1" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="debug_mouse_click" name_space="__script__" type="Python" mobile="">
      <core>
	return
	import VR
	assert hasattr(VR, "controller")

	k = None
	if dev is not None:
		k = dev.getKey()
		print("dev.getKey(): %i") % k

	if k is None:
		return

	b = dev.getBeacon()
	d = b.getDir()
	p = b.getFrom()	
	for i in range(3): p[i] = d[i]*2 - p[i]
	
	#print p, d
	#c = VR.view_user_cursors[10][1]
	#c.getBeacon().setFrom(p)
	
	p[0] = (4.15 * p[0] + 1.0) / 2
	p[1] = (4.8 * p[1] + 1.0) / 2
	p[2] = 0.0
	
	p[0] = min(1, max(0, p[0]))
	p[1] = min(1, max(0, p[1]))
	
	print "click ", p

	if k == 4:  # wheel_down
		VR.controller.zoom(-1)
	if k == 3:  # wheel_up
		VR.controller.zoom(1)
	if k == 0:  # left click
		VR.controller.press(p, 1001, True)
		pass
	if k == 2:  # right click
		VR.controller.press(p, 1001, False)

</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="0" key="-1" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="debug_mouse_move" name_space="__script__" type="Python" mobile="">
      <core>
	return
	import VR

	if not hasattr(VR, "controller"):
		return

	c = VR.controller
	
	b = m.getBeacon()
	d = b.getDir()
	p = b.getFrom()	
	for i in range(3): p[i] = d[i]*2 - p[i]
	
	#print p, d
	#c = VR.view_user_cursors[10][1]
	#c.getBeacon().setFrom(p)
	
	p[0] = (4.15 * p[0] + 1.0) / 2
	p[1] = (4.8 * p[1] + 1.0) / 2
	p[2] = 0.0
	
	p[0] = min(1, max(0, p[0]))
	p[1] = min(1, max(0, p[1]))
	
	#print p
	
	c.move(p, 1001, False)

</core>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="m" name_space="debug_mouse_move"/>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="5" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="edit" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
		    body {
				margin: 0;
				border-style: inset;
				border-width: 2px;
				padding: 10px;
				background-color: white;
			}
		
			.editDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}

			.button{
				background-color: #ffffff;
				background-repeat: no-repeat;
				background-size: 70% auto;
				background-position: center;
				height: 100%;
				display: table-cell;
			}

			button:first-child:nth-last-child(1) {
				width: 100%;
			}

			/* two items */
			button:first-child:nth-last-child(2),
			button:first-child:nth-last-child(2) ~ button {
				width: 50%;
			}

			/* three items */
			button:first-child:nth-last-child(3),
			button:first-child:nth-last-child(3) ~ button {
				width: 33.3333%;
			}

			/* four items */
			button:first-child:nth-last-child(4),
			button:first-child:nth-last-child(4) ~ button {
				width: 25%;
			}

			/* Five items */
			button:first-child:nth-last-child(5),
			button:first-child:nth-last-child(5) ~ button {
			width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Edit&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="editDiv"&gt;
			&lt;button id="delete" class="button" onclick="clickFunction(this)" style="background-image: url(Delete.png)"&gt;&lt;/button&gt;
			&lt;button id="edit" class="button" onclick="clickFunction(this)" style="background-image: url(Edit.png)"&gt;&lt;/button&gt;
			&lt;button id="copy" class="button" onclick="clickFunction(this)" style="background-image: url(Copy.png)"&gt;&lt;/button&gt;
			&lt;button id="cancel" class="button" onclick="clickFunction(this)" style="background-image: url(Cancel.png)"&gt;&lt;/button&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {
			websocket.send('blaaa');
			alert(element.id);
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import sys
	sys.path.append("../../Controller")
	sys.path.append("../../Model")
	sys.path.append("../../View")
	sys.path.append("../../HardwareInterface/hardware_main")

	import VR
	from controller import Controller
	
	#reload(Controller)
	#reload(PASS)
	#reload(View)
	#reload(hardware_interface)

	#assert hasattr(VR, "controller") == False
	VR.controller = Controller()

	print("S-BPM VR init done")

	#VR.controller.test()
	#VR.controller.init_debug_setup()
	VR.controller.test_bsp_prozess()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="layerAdd" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			body {
				margin: 0;
				border-style: inset;
				border-width: 2px;
				padding: 10px;
				background-color: white;
			}
			
			.addDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}
			
			.addItemsDiv{
				min-height: 100px;
				min-width: 100px;
				height: 100%;
				background-repeat: no-repeat;
				background-size: auto 80%;
				background-position: center;
				display: table-cell;
				text-align: center;
				
				vertical-align: middle;
				font-size: 16px; 
				font-size: 4vw;
			}

			div:first-child:nth-last-child(1) {
				height: 100%;
			}

			/* two items */
			.addItemsDiv:first-child:nth-last-child(2),
			.addItemsDiv:first-child:nth-last-child(2) ~ .addItemsDiv {
				width: 50%;
			}

			/* three items */
			.addItemsDiv:first-child:nth-last-child(3),
			.addItemsDiv:first-child:nth-last-child(3) ~ .addItemsDiv {
				width: 33.3333%;
			}

			/* four items */
			.addItemsDiv:first-child:nth-last-child(4),
			.addItemsDiv:first-child:nth-last-child(4) ~ .addItemsDiv {
				width: 25%;
			}

			/* Five items */
			.addItemsDiv:first-child:nth-last-child(5),
			.addItemsDiv:first-child:nth-last-child(5) ~ .addItemsDiv {
				width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Add&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="addDiv"&gt;
			&lt;div id="subject" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/subject.png)"&gt;Subject&lt;/div&gt;
			&lt;div id="exsubject" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/exsubject.png)"&gt;External&lt;br /&gt;Subject&lt;/div&gt;
			&lt;div id="message" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/message.png); background-size: 80% auto;"&gt;Message&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {				
			websocket.send(element.id);
			alert(element.id);
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="menu_bar_click" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	message = dev.getMessage()
	#dev.answer('blub')

	if hasattr(VR, controller):
		VR.controller.process_menu_bar(message)
	else:
		print(message)

</core>
      <trig type="on_device" dev="mobile" state="Released" param="" key="-1" name_suffix="6" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="meta" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			body {
				margin: 0;
				border-style: inset;
				border-width: 2px;
				padding: 10px;
				background-color: white;
			}
			
			.dataDiv{				
				background: #ffffff;
				width: 100%;
				height: 100%;
			}
			
			.cellKey{
				font-weight: bold;
				width: 20%;
			}
			
			.cellValue{
				font-style: italic;
				width: 80%;
			}
			
			table {
				border-collapse: collapse;
				width: 100%;
			}
			
			td {
				padding: 5px;			
			}
				
			table, th, td {
				border: 1px solid black;
			}
		&lt;/style&gt;
		&lt;title&gt;Metadata&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="dataDiv"&gt;
			&lt;h1&gt;Metadata&lt;/h1&gt;
			&lt;table id="metaTable"&gt;
				&lt;tbody&gt;
					&lt;!-- will be filled by javascript depending on URI params --&gt;
				&lt;/tbody&gt;
			&lt;/table&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;	
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			
		
		// Get params from URI
		var QueryString = function () {			
			var query_string = {};
			var query = window.location.search.substring(1);
			var vars = query.split("&amp;");
			for (var i=0;i&lt;vars.length;i++) {
				var pair = vars[i].split("=");
				if (typeof query_string[pair[0]] === "undefined") {
					query_string[pair[0]] = decodeURIComponent(pair[1]);
					// If second entry with this name
				} else if (typeof query_string[pair[0]] === "string") {
					var arr = [ query_string[pair[0]],decodeURIComponent(pair[1]) ];
					query_string[pair[0]] = arr;
				} else {
					query_string[pair[0]].push(decodeURIComponent(pair[1]));
				}
			} 
			return query_string;
		}();
		
		// Add cells depending on params from URI
		var tableRef = document.getElementById('metaTable').getElementsByTagName('tbody')[0];
		// Always two value of the query string belong together as key-value of the table row
		if(Object.keys(QueryString).length &gt; 1) {
			for(i = 0; i &lt; Object.keys(QueryString).length; i = i +2) {	
				var newRow   = tableRef.insertRow(tableRef.rows.length);
				var newCellKey  = newRow.insertCell(-1);
				var newCellValue  = newRow.insertCell(-1);
				newCellKey.appendChild(document.createTextNode(QueryString[Object.keys(QueryString)[i]]));
				newCellKey.setAttribute('class','cellKey');
				newCellValue.appendChild(document.createTextNode(QueryString[Object.keys(QueryString)[i + 1]]));				
				newCellValue.setAttribute('id','cellValue' + i);
				newCellValue.setAttribute('class','cellValue');
				newCellValue.setAttribute('contenteditable','true');
			}
		}
		
		// Add EventListeners to cells
		cells = document.querySelectorAll("[id^=cellValue]")
		var oldValue = "";
		var newValue = "";
		
		for(var i = 0; i &lt; cells.length; i++) {
			// Save value before editing
			cells[i].addEventListener('focus', function(event) {
				targetElement = event.target || event.srcElement;
				oldValue = targetElement.textContent.trim() || targetElement.innerText.trim();
			}, false);
			
		// TODO: Trim all new lines after keyup
		/*cells[i].addEventListener('keyup', function(event) {
			targetElement = event.target || event.srcElement;
			newValue = targetElement.textContent || targetElement.innerText;
			// In case of a line break, a new &lt;br&gt; tag is added and extends the childNode list
			if(targetElement.childNodes.length &gt; 2) {
				while(targetElement.hasChildNodes()) {
					targetElement.removeChild(targetElement.firstChild);					
				}	
				targetElement.appendChild(document.createTextNode(newValue));		
			}
			}, false);*/

			// Get new value and send change if necessary
			cells[i].addEventListener('blur', function(event) {
				targetElement = event.target || event.srcElement;
				key = targetElement.previousSibling.textContent || targetElement.previousSibling.innerText;
				newValue = targetElement.textContent.trim() || targetElement.innerText.trim(); 
				while(targetElement.hasChildNodes()) {
						targetElement.removeChild(targetElement.firstChild);					
					}
				targetElement.appendChild(document.createTextNode(newValue));
				if(oldValue != newValue) {
					websocket.send("metaContent[" + "id" + "] -&gt; " + targetElement.id + ": '" + oldValue + "' -&gt; '" + newValue + "'");
					alert("metaContent[" + key + "] changed: '" + oldValue + "' -&gt; '" + newValue + "'");
				}
			}, false);
		}
	&lt;/script&gt;	
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="pika_update" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if hasattr(VR, "controller"):
		VR.controller.process()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="3" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="start" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			.startDiv{				
				background: #ffffff;
				width: 100%;
				height: 100%;
			}
			
			table {
				border-collapse: collapse;
				width: 100%;
			}
			
			td {
				padding: 5px;	
				text-align: center;
				font-style: italic;	
				height: 100px;
			}
				
			table, th, td {
				border: 1px solid black;
			}
		&lt;/style&gt;
		&lt;title&gt;Start&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="startDiv"&gt;
			&lt;h1&gt;Start&lt;/h1&gt;
			&lt;table id="startTable"&gt;
				&lt;tbody&gt;
					&lt;!-- will be filled by javascript depending on URI params --&gt;
				&lt;/tbody&gt;
			&lt;/table&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			
		
		// Get params from URI
		var QueryString = function () {			
			var query_string = {};
			var query = window.location.search.substring(1);
			var vars = query.split("&amp;");
			for (var i=0;i&lt;vars.length;i++) {
				var pair = vars[i].split("=");
				if (typeof query_string[pair[0]] === "undefined") {
					query_string[pair[0]] = decodeURIComponent(pair[1]);
					// If second entry with this name
				} else if (typeof query_string[pair[0]] === "string") {
					var arr = [ query_string[pair[0]],decodeURIComponent(pair[1]) ];
					query_string[pair[0]] = arr;
				} else {
					query_string[pair[0]].push(decodeURIComponent(pair[1]));
				}
			} 
			return query_string;
		}();
		
		// Add cells depending on params from URI
		var itemsPerRow = 4
		var tableRef = document.getElementById('startTable').getElementsByTagName('tbody')[0];		
		// Add 'NEW' item
		var newRow = tableRef.insertRow(-1);
		var newCell  = newRow.insertCell(-1);
		var img = document.createElement("img");
		img.src = "Cancel.png";
		newCell.appendChild(img);
		linebreak = document.createElement("br");
		newCell.appendChild(linebreak);
		newCell.appendChild(document.createTextNode('add NEW...'));			
		// Add exisiting items
		if(Object.keys(QueryString).length &gt; 1) {
			for(i = 1; i &lt; Object.keys(QueryString).length + 1; i = i + 1) {	
				var itemInRowCount = i % itemsPerRow;
				if(itemInRowCount == 0) {
					newRow = tableRef.insertRow(-1);
				}
				var newCell = newRow.insertCell(-1);
				var img = document.createElement("img");
				img.src = "Copy.png";
				newCell.appendChild(img);
				linebreak = document.createElement("br");
				newCell.appendChild(linebreak);
				newCell.appendChild(document.createTextNode(QueryString[Object.keys(QueryString)[i - 1]]));				
			}
		}
		
		// Add EventListeners to cells
		cells = document.querySelectorAll("td")		
		for(var i = 0; i &lt; cells.length; i++) {
			cells[i].addEventListener('click', function(event) {
				var element = event.target || event.srcElement;
				var content;
				if(element.tagName.indexOf('IMG') &gt; -1) {
					content = element.parentNode.textContent.trim() || element.parentNode.innerText.trim();
				}
				else {
				 content = element.textContent.trim() || element.innerText.trim();
				}
						
				websocket.send(content);
				alert(content);
			}, false);
		}
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="update_pathtool" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if hasattr(VR, 'ptool'):
		VR.ptool.update()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" format=".png" path="" type="0"/>
  <Navigation active="None"/>
  <Materials/>
</Scene>
