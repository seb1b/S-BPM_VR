<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="controller_" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1"/>
      <Object name_suffix="0" base_name="light" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="light_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="0 0 10" at="0 0 9" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" accept_root="1" near="0.1" far="250" aspect="1" fov="0.2">
          <Object name_suffix="0" base_name="light_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="light"/>
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" occlusion_culling="0" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts>
    <Script name_suffix="1" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	pass
</core>
    </Script>
    <Script name_suffix="2" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	HANDLE = VR.Geometry('handle')
	HANDLE.setPrimitive('Box 0.03 0.03 0.03 1 1 1')
	
	mes = VR.Geometry('mes')
	mes.setPrimitive('Box 0.2 0.1 0.2 1 1 1')
	mes.setFrom(0.6, 0, 0)
	mes.setPickable(True)
#	mes.setPickable(False)

	sub = VR.Geometry('sub')
	sub.setPrimitive('Box 0.2 0.2 0.2 1 1 1')
	sub.setFrom(1.2, 0.6, 0)
	sub.setPickable(True)
#	sub.setPickable(False)

	mid = VR.Geometry('mid')
	mid.setPrimitive('Box 0 0 0 1 1 1')
	mid.setFrom(0.6, 0.6, 0)
	mid.setPickable(True)
#	mid.setPickable(False)
				
	VR.view_root.addChild(mes)
	VR.view_root.addChild(sub)
	VR.view_root.addChild(mid)
	
	VR.ptool = VR.Pathtool()
	VR.ptool.getPathMaterial().setDiffuse(0,0,1)
	VR.ptool.setHandleGeometry(HANDLE)
	paths = []

	paths.append(VR.ptool.newPath(None, VR.view_root))
	handles1 = VR.ptool.getHandles(paths[0])
	assert len(handles1) == 2, "invalid number of handles"
	handles1[0].setDir(0.1, 0, 0.0)
	#handles1[0].setUp(0, 1, 0)
	handles1[0].setPickable(False)
	handles1[0].setVisible(False)
#	handles1[0].setPickable(True)
	sub.addChild(handles1[0])
#	handles1[0].addChild(sub)
	handles1[1].setDir(0.1, 0, 0.0)
	handles1[1].setPickable(False)
#	handles1[1].setPickable(True)
	handles1[1].setVisible(False)
	mid.addChild(handles1[1])
#	handles1[1].addChild(mes)

	VR.ptool.remPath(paths[0])
	
	paths.append(VR.ptool.newPath(None, VR.view_root))
	handles2 = VR.ptool.getHandles(paths[1])
	assert len(handles2) == 2, "invalid number of handles"
	handles2[0].setDir(0, 0.1, 0.0)
	handles2[0].setPickable(False)
#	handles2[0].setPickable(True)
	handles2[0].setVisible(False)
	mid.addChild(handles2[0])
#	handles2[0].addChild(sub)
	handles2[1].setDir(0, 0.1, 0.0)
	handles2[1].setPickable(False)
	handles2[1].setVisible(False)	
#	handles2[1].setPickable(True)
	mes.addChild(handles2[1])
#	handles2[1].addChild(mes)
	
	
	VR.ptool.update()
	
	print VR.view_root.getChildren()
	#mes.destroy()
	#print VR.view_root.getChildren()
	
</core>
    </Script>
    <Script name_suffix="3" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	mes = VR.loadGeometry('../../View/Blender/Prozess/Message_Hashtag.dae')
	mes.setScale(0.1, 0.1, 0.1)
	mes.setPose([0, 0, 0], [0, 1, 0], [0, 0, 1])
	VR.view_root.addChild(mes)
</core>
    </Script>
    <Script name_suffix="4" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	def beispiel1():
		cam = VR.getRoot().find('Default')
	
		path = VR.Path()
		path.set([0,0,20],[0,0,1],[0,1,0], [0,0,30],[0,0,1],[0,1,0], 80)
	
		cam.animate(path, 2, 0, False)
		
	def fly(t):
		cam = VR.getRoot().find('Default')
		p = [0,0,20+t*10]
		cam.setFrom(p)
		
	a = VR.Animation('fly')
	a.setCallback(fly)
	a.setDuration(2)
	
	a.start()
</core>
    </Script>
    <Script name_suffix="0" base_name="behaviorAdd" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			@font-face {
				font-family: NeouBold;
				src: url("fonts/Neou-Bold.otf");
			}
			
			@font-face {
				font-family: NeouThin;
				src: url("fonts/Neou-Thin.otf")
			}
			
			body {
				margin: 0;
				border-right-style: solid;
				border-top-style: solid;
				border-width: 1px;
				border-color: #b0b0b0;
				padding: 10px;
				background-color: white;
				font-family: NeouBold;
			}
			
			.addDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}
			
			.addItemsDiv{
				min-height: 100px;
				min-width: 100px;
				height: 100%;
				background-repeat: no-repeat;
				background-size: auto 70%;
				background-position: center;
				display: table-cell;
				text-align: center;				
				vertical-align: bottom;
				font-size: 16px;
				font-size: 2.5vw;
				border-style: solid;
				border-color: #3692d3;
				border-width: 0px;
			}
			
			.addItemsDiv:hover {
				border-width: 1px;
				opacity: .7;
				background-color: #ffff99;
			}

			div:first-child:nth-last-child(1) {
				height: 100%;
			}

			/* two items */
			.addItemsDiv:first-child:nth-last-child(2),
			.addItemsDiv:first-child:nth-last-child(2) ~ .addItemsDiv {
				width: 50%;
			}

			/* three items */
			.addItemsDiv:first-child:nth-last-child(3),
			.addItemsDiv:first-child:nth-last-child(3) ~ .addItemsDiv {
				width: 33.3333%;
			}

			/* four items */
			.addItemsDiv:first-child:nth-last-child(4),
			.addItemsDiv:first-child:nth-last-child(4) ~ .addItemsDiv {
				width: 25%;
			}

			/* Five items */
			.addItemsDiv:first-child:nth-last-child(5),
			.addItemsDiv:first-child:nth-last-child(5) ~ .addItemsDiv {
				width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Add&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="addDiv"&gt;
			&lt;div id="functionState" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/fState.png)"&gt;Function State&lt;/div&gt;
			&lt;div id="receiveState" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/rState.png)"&gt;Receive State&lt;/div&gt;
			&lt;div id="sendState" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/sState.png)"&gt;Send State&lt;/div&gt;
			&lt;div id="transition" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(img/transition.png)"&gt;Transition&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {				
			websocket.send(element.id);
			alert(element.id);
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="debug_keyboard" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	assert hasattr(VR, "controller")

	k = dev.getKey()
	print("dev.getKey(): %i") % k
	if k == 65361:  # left arrow
		VR.controller.move_model([0.1, 0.0, 0.0], 0)
	if k == 65362:  # up arrow
		VR.controller.move_model([0.0, -0.1, 0.0], 0)
	if k == 65363:  # right arrow
		VR.controller.move_model([0.0, 0.6, 0.0], 0)
	if k == 65364:  # down arrow
		VR.controller.move_model([0.0, 0.1, 0.0], 0)
	if k == 102:  # F
		VR.controller.fade_away()
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="-1" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="debug_mouse_click" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	assert hasattr(VR, "controller")

	k = None
	if dev is not None:
		k = dev.getKey()
		s = dev.getKeyState(k)
		print(("dev.getKey(): {} state: {}".format(k, s)))

	if k is None:
		return
	if s == 1: 
		# release
		#return
		pass

	# TODO: remove return if necessary
	return

	#b = dev.getBeacon()
	b = VR.b
	d = b.getDir()
	p = b.getFrom()	
	for i in range(3): p[i] = d[i]*2 - p[i]
	
	#print p, d
	#c = VR.view_user_cursors[10][1]
	#c.getBeacon().setFrom(p)
	
	p[0] = (4.15 * p[0] + 1.0) / 2
	p[1] = (4.8 * p[1] + 1.0) / 2
	p[2] = 0.0
	
	p[0] = min(1, max(0, p[0]))
	p[1] = min(1, max(0, p[1]))
	
	print "click ", p

	if k == 4:  # wheel_down
		VR.controller.zoom(-1)
	if k == 3:  # wheel_up
		VR.controller.zoom(1)
	if k == 0:  # left click
		if s == 1:
			VR.controller.press(p, 1001, False)
		elif s == 0:
			VR.controller.release(p, 1001, False)
	if k == 2:  # right click
		VR.controller.press(p, 1001, False)

</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="0" key="-1" name_suffix="1" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="mouse" state="Released" param="0" key="-1" name_suffix="9" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="debug_mouse_move" name_space="__script__" type="Python" mobile="">
      <core>
	# TODO: remove return if necessary
	return
	import VR

	if not hasattr(VR, "controller"):
		return

	c = VR.controller
	
	VR.b = m.getBeacon()
	d = VR.b.getDir()
	p = VR.b.getFrom()	
	for i in range(3): p[i] = d[i]*2 - p[i]
	
	#print p, d
	#c = VR.view_user_cursors[10][1]
	#c.getBeacon().setFrom(p)
	
	p[0] = (4.15 * p[0] + 1.0) / 2
	p[1] = (4.8 * p[1] + 1.0) / 2
	p[2] = 0.0
	
	p[0] = min(1, max(0, p[0]))
	p[1] = min(1, max(0, p[1]))
	
	#print p
	
	c.move(p, 1001, False)

</core>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="m" name_space="debug_mouse_move"/>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="5" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="edit" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			@font-face {
				font-family: NeouBold;
				src: url("fonts/Neou-Bold.otf");
			}
			
			@font-face {
				font-family: NeouThin;
				src: url("fonts/Neou-Thin.otf")
			}
			
		    body {
				margin: 0;
				border-right-style: solid;
				border-top-style: solid;
				border-width: 1px;
				border-color: #b0b0b0;
				padding: 10px;
				background-color: white;
				font-family: NeouBold;				
			}
		
			.editDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}
			
			.addItemsDiv{
				min-height: 100px;
				min-width: 100px;
				height: 100%;
				background-repeat: no-repeat;
				background-size: auto 70%;
				background-position: top;
				display: table-cell;
				text-align: center;				
				vertical-align: bottom;
				font-size: 16px;
				font-size: 2.5vw;
			}

			div:first-child:nth-last-child(1) {
				height: 100%;
			}

			/* two items */
			.addItemsDiv:first-child:nth-last-child(2),
			.addItemsDiv:first-child:nth-last-child(2) ~ .addItemsDiv {
				width: 50%;
			}

			/* three items */
			.addItemsDiv:first-child:nth-last-child(3),
			.addItemsDiv:first-child:nth-last-child(3) ~ .addItemsDiv {
				width: 33.3333%;
			}

			/* four items */
			.addItemsDiv:first-child:nth-last-child(4),
			.addItemsDiv:first-child:nth-last-child(4) ~ .addItemsDiv {
				width: 25%;
			}

			/* Five items */
			.addItemsDiv:first-child:nth-last-child(5),
			.addItemsDiv:first-child:nth-last-child(5) ~ .addItemsDiv {
				width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Edit&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="editDiv"&gt;
			&lt;div id="delete" class="addItemsDiv" onclick="clickFunction(this)" onmousedown="mouseDownFunction(this)" onmouseup="mouseUpFunction(this)" style="background-image: url(img/delete.png)"&gt;Delete&lt;/div&gt;
			&lt;div id="copy" class="addItemsDiv" onclick="clickFunction(this)" onmousedown="mouseDownFunction(this)" onmouseup="mouseUpFunction(this)" style="background-image: url(img/copy.png)"&gt;Copy&lt;/div&gt;
			&lt;div id="cancel" class="addItemsDiv" onclick="clickFunction(this)" onmousedown="mouseDownFunction(this)" onmouseup="mouseUpFunction(this)" style="background-image: url(img/cancel.png);"&gt;Cancel&lt;/div&gt;
			&lt;!--
			&lt;button id="delete" class="button" onclick="clickFunction(this)" style="background-image: url(img/delete.png)"&gt;Delete&lt;/button&gt;
			&lt;button id="copy" class="button" onclick="clickFunction(this)" style="background-image: url(img/copy.png)"&gt;Copy&lt;/button&gt;
			&lt;button id="cancel" class="button" onclick="clickFunction(this)" style="background-image: url(img/cancel.png)"&gt;Cancel&lt;/button&gt;
			--&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {
			websocket.send(element.id);
			//alert(element.id);
		};

		function mouseDownFunction(element) {
			websocket.send(element.id.concat("_down"));
			//alert(element.id.concat("_down"));
		};
		
		function mouseUpFunction(element) {
			websocket.send(element.id.concat("_up"));
			//alert(element.id.concat("_up"));
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import sys
	sys.path.append("../../Controller")
	sys.path.append("../../Model")
	sys.path.append("../../View")
	sys.path.append("../../HardwareInterface/hardware_main")

	import VR
	from controller import Controller
	
	#reload(Controller)
	#reload(PASS)
	#reload(View)
	#reload(hardware_interface)

	#assert hasattr(VR, "controller") == False
	VR.keyboard = keyboard
	VR.controller = Controller()
	#VR.controller.view.meta_site.addKeyboard(keyboard)

	print("S-BPM VR init done")

	#VR.controller.test()
	#VR.controller.init_debug_setup()
	VR.controller.test_bsp_prozess()
	#VR.controller.init_empty()
</core>
      <arg type="VRPyDeviceType" value="keyboard" name_suffix="0" base_name="keyboard" name_space="init"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="layerAdd" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			@font-face {
				font-family: NeouBold;
				src: url("fonts/Neou-Bold.otf");
			}
			
			@font-face {
				font-family: NeouThin;
				src: url("fonts/Neou-Thin.otf")
			}
		
			body {				
				margin: 0;
				border-right-style: solid;
				border-top-style: solid;
				border-width: 1px;
				border-color: #b0b0b0;
				padding: 10px;
				background-color: white;
				font-family: NeouBold;
			}
			
			.addDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}
			
			.addItemsDiv{
				min-height: 100px;
				min-width: 100px;
				height: 100%;
				background-repeat: no-repeat;
				background-size: auto 70%;
				background-position: top;
				display: table-cell;
				text-align: center;				
				vertical-align: bottom;
				font-size: 16px;
				font-size: 2.5vw;
				border-style: solid;
				border-color: #3692d3;
				border-width: 0px;
			}
			
			.addItemsDiv:hover {
				border-width: 1px;
				opacity: .7;
				background-color: #ffff99;
			}

			div:first-child:nth-last-child(1) {
				height: 100%;
			}

			/* two items */
			.addItemsDiv:first-child:nth-last-child(2),
			.addItemsDiv:first-child:nth-last-child(2) ~ .addItemsDiv {
				width: 50%;
			}

			/* three items */
			.addItemsDiv:first-child:nth-last-child(3),
			.addItemsDiv:first-child:nth-last-child(3) ~ .addItemsDiv {
				width: 33.3333%;
			}

			/* four items */
			.addItemsDiv:first-child:nth-last-child(4),
			.addItemsDiv:first-child:nth-last-child(4) ~ .addItemsDiv {
				width: 25%;
			}

			/* Five items */
			.addItemsDiv:first-child:nth-last-child(5),
			.addItemsDiv:first-child:nth-last-child(5) ~ .addItemsDiv {
				width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Add&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="addDiv"&gt;
			&lt;div id="subject" class="addItemsDiv" onclick="clickFunction(this)" onmousedown="mouseDownFunction(this)" onmouseup="mouseUpFunction(this)" style="background-image: url(img/subject.png)"&gt;Subject&lt;/div&gt;
			&lt;div id="exsubject" class="addItemsDiv" onclick="clickFunction(this)" onmousedown="mouseDownFunction(this)" onmouseup="mouseUpFunction(this)" style="background-image: url(img/exsubject.png)"&gt;External Subject&lt;/div&gt;
			&lt;div id="message" class="addItemsDiv" onclick="clickFunction(this)" onmousedown="mouseDownFunction(this)" onmouseup="mouseUpFunction(this)" style="background-image: url(img/message.png);"&gt;Message&lt;/div&gt;
		&lt;/div&gt;
		&lt;div id="test"&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');
					
		function clickFunction(element) {
			websocket.send(element.id);
			//alert(element.id);
			var test = document.getElementById('test');
			test.appendChild(document.createTextNode("click"));
		};

		function mouseDownFunction(element) {
			websocket.send(element.id.concat("_down"));
			//alert(element.id.concat("_down"));
			var test = document.getElementById('test');
			test.appendChild(document.createTextNode("down"));
		};
		
		function mouseUpFunction(element) {
			websocket.send(element.id.concat("_up"));
			//alert(element.id.concat("_up"));
			var test = document.getElementById('test');
			test.appendChild(document.createTextNode("up"));
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="menu_bar_click" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	message = dev.getMessage()
	#dev.answer('blub')

	if hasattr(VR, "controller"):
		VR.controller.process_menu_bar(message)
	else:
		print(message)

</core>
      <trig type="on_device" dev="mobile" state="Released" param="" key="-1" name_suffix="6" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="meta" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			@font-face {
				font-family: NeouBold;
				src: url("fonts/Neou-Bold.otf");
			}
			
			@font-face {
				font-family: NeouThin;
				src: url("fonts/Neou-Thin.otf")
			}
			
			body {
				margin: 0;
				border-left-style: solid;
				border-bottom-style: solid;
				border-width: 1px;
				border-color: #b0b0b0;
				padding: 10px;
				background-color: white;
				font-family: NeouBold;
				color: #3692d3;				
			}
			
			.dataDiv{
				width: 100%;
				height: 100%;
			}
			
			.cellKey{
				#font-weight: bold;
				width: 25%;
			}
			
			.cellValue{
				#font-style: italic;
				width: 75%;
				word-break: break-all;
				padding-left: 5%;
			}
			
			table {
				border-collapse: collapse;
				width: 100%;
				border-style: solid;
				border-color: #000000;
				border-width: 0px;
				font-size: 15px;
			}
			
			.editable {
				border-style: solid;
				border-color: #3692d3;
				border-width: 0px;
			}
			
			.editable:hover {
				border-width: 1px;
			}
			
			td {
				padding: 0px;			
			}
			
			tr {
				height: 50px;
			}
			
			#heading {
				font-size: 20px;
			}
			
		&lt;/style&gt;
		&lt;title&gt;Metadata&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="dataDiv"&gt;
			
			&lt;h1 id="heading"&gt;
				&lt;!-- will be filled by javascript depending on URI params --&gt;
			&lt;/h1&gt;
			&lt;table id="metaTable"&gt;
				&lt;tbody&gt;
					&lt;!-- will be filled by javascript depending on URI params --&gt;
				&lt;/tbody&gt;
			&lt;/table&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		function Heading(value, editable) {
			this.value = value;
			this.editable = editable;
			this.editIcon = null;
			this.text = null;
			
			var self = this;
			
			//View this element
			this.displayElement = function(parent) {
				if(this.editable) {
					this.editIcon = document.createElement("img");
					this.editIcon.setAttribute("src", "img/edit.png");
					this.editIcon.setAttribute("style", "float: left; width: 60px; height: 60px; padding: 5px;");
					parent.appendChild(this.editIcon);
				}
				this.text = document.createElement("div");
				this.text.textContent = this.value;
				if(this.editable) {
					this.text.setAttribute('contenteditable', 'true');
					this.text.addEventListener('click', self.click, false);
					this.text.addEventListener('blur', self.blur, false);
					this.text.setAttribute("class", "editable");
					this.editIcon.addEventListener('click', self.click, false);
				}
				parent.appendChild(this.text);
			};
			
			this.click = function(event) {
				//Set color
				self.text.style.backgroundColor = "#FFF90D";
				self.text.focus();
			};
			
			this.blur = function(event) {
				var newText = self.text.textContent.trim() || self.text.innerText.trim(); 
				if(newText != value) {
					websocket.send("metaContent[id] -&gt; sbpm_label: '" + self.value + "' -&gt; '" + newText + "'");
					alert("metaContent[sbpm_label] changed: '" + self.value + "' -&gt; '" + newText + "'");
					self.value = newText;
				}
				self.text.style.backgroundColor = "transparent";
				console.log(self);
			};
		}
	
		function MetaContentPair(key, value) {
			this.key = key;
			this.value = value;
			this.row = null;
			this.keyCol = null;
			this.valueCol = null;
			var self = this;
			
			//View this element
			this.displayElement = function(parentTable) {
				this.row = parentTable.insertRow(parentTable.rows.length - 1);
				this.keyCol = this.row.insertCell(0);
				this.keyCol.innerHTML = this.key;
				this.keyCol.setAttribute("class", "cellKey");
				this.valueCol = this.row.insertCell(1);
				this.valueCol.innerHTML = this.value;
				this.valueCol.addEventListener('click', self.click, false);
				this.valueCol.addEventListener('blur', self.blur, false);
				this.valueCol.setAttribute('contenteditable','true');
				this.valueCol.setAttribute("class", "editable cellValue");
			};
			
			this.click = function(event) {
				//Set color
				self.valueCol.style.backgroundColor = "#FFF90D";
			};
			
			this.blur = function(event) {
				console.log(self.valueCol.innerHTML);
				var newText = self.valueCol.textContent.trim() || self.valueCol.innerText.trim(); 
				if(newText != value) {
					websocket.send("metaContent[id] -&gt; " + self.key + ": '" + self.value + "' -&gt; '" + newText + "'");
					alert("metaContent[" + self.key + "] changed: '" + self.value + "' -&gt; '" + newText + "'");
					self.value = newText;
				}
				self.valueCol.style.backgroundColor = "transparent";
				console.log(self);
			};
		}
	
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			
		
		// Interprete the query
		var search = window.location.search.substring(1);
		var params = JSON.parse('{"' + decodeURI(search).replace(/"/g, '\\"').replace(/&amp;/g, '","').replace(/=/g,'":"') + '"}')
		
		// Add cells depending on params from URI
		var tableRef = document.getElementById('metaTable').getElementsByTagName('tbody')[0];
		var headingRef = document.getElementById('heading');
		for (var key in params) {
			//Check whether it is a special parameter
			if(key.lastIndexOf("sbpm_") == 0) {
				if(key == "sbpm_label") {
					//Set the label here
					var label = new Heading(params[key], true);
					label.displayElement(headingRef);
				} else if(key == "sbpm_noEditLabel") {
					var label = new Heading(params[key], false);
					label.displayElement(headingRef);
				}
			} else {
				var meta = new MetaContentPair(key, params[key]);
				meta.displayElement(tableRef);
			}
		}
		
	&lt;/script&gt;	
&lt;/html&gt;













</core>
    </Script>
    <Script name_suffix="0" base_name="pika_update" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#if hasattr(VR, "controller"):
	#	VR.controller.process()

	if hasattr(VR, "hw_main"):
		VR.hw_main.process()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="3" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="save_model" name_space="__script__" type="Python" mobile="">
      <core>
	return # TODO: remove to enable saving model
	print("VR: save_model")
	import VR
	if hasattr(VR, "controller"):
		VR.controller.save_model()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="60000" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
      <trig type="on_scene_close" dev="" state="Pressed" param="0" key="0" name_suffix="8" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="start" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			@font-face {
				font-family: NeouBold;
				src: url("fonts/Neou-Bold.otf");
			}
			
			@font-face {
				font-family: NeouThin;
				src: url("fonts/Neou-Thin.otf")
			}
			
			body {
				margin: 0;
				border-style: none;
				padding: 10px;
				background-image: url("img/bg.png");
				background-size: 100% 100%;
				font-family: NeouBold;
			}
			
			.startDiv{				
				width: 100%;
				height: 100%;
			}
			
			img { 
				border:1px solid #b0b0b0;
			}
			
			table {
				border-collapse: collapse;
				width: 100%;
			}
			
			td {
				padding: 5px;	
				text-align: center;
				font-style: italic;	
				height: 100px;
				max-width: 100px;
				border-style: solid;
				border-color: #3692d3;
				border-width: 0px;
			}
			
			td:hover {
				border-width: 1px;
				opacity: .7;
				background-color: #ffff99;
			}
		&lt;/style&gt;
		&lt;title&gt;Start&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="startDiv"&gt;
			&lt;h1&gt;Start&lt;/h1&gt;
			&lt;table id="startTable"&gt;
				&lt;tbody&gt;
					&lt;!-- will be filled by javascript depending on URI params --&gt;
				&lt;/tbody&gt;
			&lt;/table&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			
		
		// Get params from URI
   		var QueryString = function () {                 
		var query_string = {};
		var query = window.location.search.substring(1);
		var decoded_query = decodeURI(query).replace(/ /g," ");
		var vars = decoded_query.split("&amp;");
		for (var i=0;i &lt; vars.length;i++) {
			var pair = vars[i].split("=");
			query_string[i] = pair;
		}
		return query_string;
		}();
                
		// Add cells depending on params from URI
		var itemsPerRow = 4;
		var tableRef = document.getElementById('startTable').getElementsByTagName('tbody')[0]; 
		// Add exisiting items
		if(Object.keys(QueryString).length &gt; 0) {
			for(i = 0; i &lt; Object.keys(QueryString).length; i = i+1) {
				var itemInRowCount = i % itemsPerRow;
				if(itemInRowCount == 0) {
					newRow = tableRef.insertRow(-1);
				}
				var newCell = newRow.insertCell(-1);
				newCell.setAttribute("id", QueryString[i][2]);
				var img = document.createElement("img");
				img.src = QueryString[i][1];
				img.style.height = '150px';
				newCell.appendChild(img);
				linebreak = document.createElement("br");
				newCell.appendChild(linebreak);
				newCell.appendChild(document.createTextNode(QueryString[i][0]));
			}
		}             
	
		// Set table width
		var tableRef = document.getElementById('startTable');
		var itemWidth = 100/itemsPerRow;
		var lengthQueryString = Object.keys(QueryString).length;
		if (lengthQueryString == 0) {
			tableRef.style.width = itemWidth + '%';
		}
		else if (lengthQueryString == 1) {
			tableRef.style.width = 2 * itemWidth + '%';
		}
		else if (lengthQueryString == 2) {
			tableRef.style.width = 3 * itemWidth +  '%';
		}
		else {
			tableRef.style.width = '100%';
		}
		     
		// Add EventListeners to cells
		cells = document.querySelectorAll("td")         
		for(var i = 0; i &lt; cells.length; i++) {
			cells[i].addEventListener('click', function(event) {
				var element = event.target || event.srcElement;
				var content;
				var id;
				if(element.tagName.indexOf('IMG') &gt; -1) {
					content = element.parentNode.textContent
					id = element.parentNode.getAttribute("id")
				}
				else {
					content = element.textContent.trim() || element
					id = element.getAttribute("id")
				}
                                          
			websocket.send(/*content + " " +*/ id);
			alert(/*content + " " +*/ id);
		}, false);
	}
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="update_pathtool" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if hasattr(VR, 'ptool'):
		VR.ptool.update()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" format=".png" path="img/bg.png" type="1"/>
  <Navigation active="None"/>
  <Materials/>
</Scene>
