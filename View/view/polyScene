<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="polyS" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="1 0.5 -2" at="1 0.5 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" occlusion_culling="0" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="Script" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#print 'klick', dev.getState()
	
	VR.mydev.setBeacon(mouse.getBeacon())
	if VR.mydev.intersect():
		i = VR.mydev.getIntersected()
		#print i, i.getName(), dev.getIntersection()
		#print i, i.getTags()
		print dev.getState()
		VR.mydev.trigger(0,dev.getState())
	else:
		print 'leer'
</core>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="mouse" name_space="Script"/>
      <trig type="on_device" dev="mouse" state="Released" param="" key="0" name_suffix="3" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="add" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;!DOCTYPE HTML PUBLIC&gt;
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			.addDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}
			
			.addItemsDiv{
				min-height: 100px;
				min-width: 100px;
				height: 100%;
				float: left;
				background-repeat: no-repeat;
				background-size: 90% auto;
				background-position: center;
				display: table-cell;
			}

			div:first-child:nth-last-child(1) {
				height: 100%;
			}

			/* two items */
			.addItemsDiv:first-child:nth-last-child(2),
			.addItemsDiv:first-child:nth-last-child(2) ~ .addItemsDiv {
				width: 50%;
			}

			/* three items */
			.addItemsDiv:first-child:nth-last-child(3),
			.addItemsDiv:first-child:nth-last-child(3) ~ .addItemsDiv {
				width: 33.3333%;
			}

			/* four items */
			.addItemsDiv:first-child:nth-last-child(4),
			.addItemsDiv:first-child:nth-last-child(4) ~ .addItemsDiv {
				width: 25%;
			}

			/* Five items */
			.addItemsDiv:first-child:nth-last-child(5),
			.addItemsDiv:first-child:nth-last-child(5) ~ .addItemsDiv {
				width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Add&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="addDiv"&gt;
			&lt;div id="subject" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(Copy.png)"&gt;Subject&lt;/div&gt;
			&lt;div id="message" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(Copy.png)"&gt;Message&lt;/div&gt;
			&lt;div id="object" class="addItemsDiv" onclick="clickFunction(this)" style="background-image: url(Copy.png)"&gt;Object&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {				
			websocket.send(element.id);
			alert(element.id);
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="data" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;!DOCTYPE HTML PUBLIC&gt;
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			.dataDiv{				
				background:#ffffff;
				width:100%;
				height:100%;
			}
			
			.cellKey{
				font-weight: bold;
				width:20%;
			}
			
			.cellValue{
				font-style: italic;
				width:80%;
			}
			
			table {
				border-collapse: collapse;
				width:100%;
			}
			
			td {
				padding: 5px;			
			}
				
			table, th, td {
				border: 1px solid black;
			}
		&lt;/style&gt;
		&lt;title&gt;Metadata&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="dataDiv"&gt;
			&lt;h1&gt;Metadata&lt;/h1&gt;
			&lt;table id="metaTable"&gt;
				&lt;tbody&gt;
					&lt;!-- will be filled by javascript depending on URI params --&gt;
				&lt;/tbody&gt;
			&lt;/table&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;	
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			
		
		// Get params from URI
		var QueryString = function () {			
			var query_string = {};
			var query = window.location.search.substring(1);
			var vars = query.split("&amp;");
			for (var i=0;i&lt;vars.length;i++) {
				var pair = vars[i].split("=");
				if (typeof query_string[pair[0]] === "undefined") {
					query_string[pair[0]] = decodeURIComponent(pair[1]);
					// If second entry with this name
				} else if (typeof query_string[pair[0]] === "string") {
					var arr = [ query_string[pair[0]],decodeURIComponent(pair[1]) ];
					query_string[pair[0]] = arr;
				} else {
					query_string[pair[0]].push(decodeURIComponent(pair[1]));
				}
			} 
			return query_string;
		}();
		
		// Add cells depending on params from URI
		var tableRef = document.getElementById('metaTable').getElementsByTagName('tbody')[0];
		// Always two value of the query string belong together as key-value of the table row
		if(Object.keys(QueryString).length &gt; 1) {
			for(i = 0; i &lt; Object.keys(QueryString).length; i = i +2) {	
				var newRow   = tableRef.insertRow(tableRef.rows.length);
				var newCellKey  = newRow.insertCell(-1);
				var newCellValue  = newRow.insertCell(-1);
				newCellKey.appendChild(document.createTextNode(QueryString[Object.keys(QueryString)[i]]));
				newCellKey.setAttribute('class','cellKey');
				newCellValue.appendChild(document.createTextNode(QueryString[Object.keys(QueryString)[i + 1]]));				
				newCellValue.setAttribute('id','cellValue' + i);
				newCellValue.setAttribute('class','cellValue');
				newCellValue.setAttribute('contenteditable','true');
			}
		}
		
		// Add EventListeners to cells
		cells = document.querySelectorAll("[id^=cellValue]")
		var oldValue = "";
		var newValue = "";
		
		for(var i = 0; i &lt; cells.length; i++) {
			// Save value before editing
			cells[i].addEventListener('focus', function(event) {
				targetElement = event.target || event.srcElement;
				oldValue = targetElement.textContent.trim() || targetElement.innerText.trim();
			}, false);
			
			// TODO: Trim all new lines after keyup
			/*cells[i].addEventListener('keyup', function(event) {
				targetElement = event.target || event.srcElement;
				newValue = targetElement.textContent || targetElement.innerText;
				// In case of a line break, a new &lt;br&gt; tag is added and extends the childNode list
				if(targetElement.childNodes.length &gt; 2) {
					while(targetElement.hasChildNodes()) {
						targetElement.removeChild(targetElement.firstChild);					
					}	
					targetElement.appendChild(document.createTextNode(newValue));		
				}
			}, false);*/

			// Get new value and send change if necessary
			cells[i].addEventListener('blur', function(event) {
				targetElement = event.target || event.srcElement;
				key = targetElement.previousSibling.textContent || targetElement.previousSibling.innerText;
				newValue = targetElement.textContent.trim() || targetElement.innerText.trim(); 
				while(targetElement.hasChildNodes()) {
						targetElement.removeChild(targetElement.firstChild);					
					}
				targetElement.appendChild(document.createTextNode(newValue));
				if(oldValue != newValue) {
					websocket.send("metaContent[" + "id" + "] -&gt; " + targetElement.id + ": '" + oldValue + "' -&gt; '" + newValue + "'");
					alert("metaContent[" + key + "] changed: '" + oldValue + "' -&gt; '" + newValue + "'");
				}
			}, false);
		}
	&lt;/script&gt;	
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="edit" name_space="__script__" type="HTML" mobile="mobile">
      <core>
&lt;!DOCTYPE HTML PUBLIC&gt;
&lt;html lang="de"&gt;
	&lt;head&gt;
		&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
		&lt;style&gt;
			.editDiv{
				position: relative;
				background: #ffffff;
				width: 100%;
				height: 100%;
				min-height: 100px;
				display: table;
			}

			.button{
				background-color: #ffffff;
				background-repeat: no-repeat;
				background-size: 90% auto;
				background-position: center;
				height: 100%;
				display: table-cell;
			}

			button:first-child:nth-last-child(1) {
				width: 100%;
			}

			/* two items */
			button:first-child:nth-last-child(2),
			button:first-child:nth-last-child(2) ~ button {
				width: 50%;
			}

			/* three items */
			button:first-child:nth-last-child(3),
			button:first-child:nth-last-child(3) ~ button {
				width: 33.3333%;
			}

			/* four items */
			button:first-child:nth-last-child(4),
			button:first-child:nth-last-child(4) ~ button {
				width: 25%;
			}

			/* Five items */
			button:first-child:nth-last-child(5),
			button:first-child:nth-last-child(5) ~ button {
			width: 20%;
			}
		&lt;/style&gt;
		&lt;title&gt;Edit&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;		
		&lt;div class="editDiv"&gt;
			&lt;button id="delete" class="button" onclick="clickFunction(this)" style="background-image: url(Delete.png)"&gt;&lt;/button&gt;
			&lt;button id="edit" class="button" onclick="clickFunction(this)" style="background-image: url(Edit.png)"&gt;&lt;/button&gt;
			&lt;button id="copy" class="button" onclick="clickFunction(this)" style="background-image: url(Copy.png)"&gt;&lt;/button&gt;
			&lt;button id="cancel" class="button" onclick="clickFunction(this)" style="background-image: url(Cancel.png)"&gt;&lt;/button&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;script&gt;
		// Create websocket for communication with python code
		var websocket = new WebSocket('ws://localhost:5500');			

		function clickFunction(element) {				
			websocket.send(element.id);
			alert(element.id);
		};
	&lt;/script&gt;
&lt;/html&gt;
</core>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	
	
	camera_from = [1, 0.5, -2]
	camera_at = [1, 0.5, -1.0]
	camera_dir =[0, 0, 1]	
	
	# setup root
	VR.view_root = VR.getRoot().find('Headlight')
	VR.cam = VR.getRoot().find('Default')
	VR.cam.setFrom(camera_from)
	VR.cam.setAt(camera_at)
	VR.cam.setDir(camera_dir)
	
	VR.mydev = VR.Device('mydev')
	VR.mydev.addIntersection(VR.view_root)
	
	# setup menu bar edit	
	editPlane = VR.Geometry('edit')
	editPlane.setPrimitive('Plane 1.2 0.4 1 1')
	material = VR.Material('gui')
	material.setLit(False)
	editPlane.setMaterial(material)
	editPlane.setFrom(1.1, 1, 0)
	editPlane.setUp(0,-1,0)
	editPlane.setPickable(False)
	editPlane.addTag('edit')	
	
	editSite = VR.CEF()
	editSite.setMaterial(editPlane.getMaterial())
	editSite.open('http://localhost:5500/edit')	
	
	VR.view_root.addChild(editPlane)
	editSite.addMouse(VR.mydev, editPlane, 0, 2, 3, 4)
	editSite.addKeyboard(keyboard)
	VR.site = editSite	
	
	# setup menu bar metadata
	dataPlane = VR.Geometry('data')
	dataPlane.setPrimitive('Plane 0.4 1.2 1 1')
	material = VR.Material('gui')
	material.setLit(False)
	dataPlane.setMaterial(material)
	dataPlane.setFrom(0.3, 0.6, 0)
	dataPlane.setUp(0,-1,0)
	dataPlane.setPickable(False)
	dataPlane.addTag('data')	
	
	dataSite = VR.CEF()
	dataSite.setMaterial(dataPlane.getMaterial())
	# refresh URI with new params depending on highlighted component
	# TODO: create method to convert metacontent array from selected object into URI params
	params = '?' + 'm1_k=key1&amp;m1_v=value1&amp;m2_k=key2&amp;m2_v=value2'
	dataSite.open('http://localhost:5500/data' + params)
	
	VR.view_root.addChild(dataPlane)
	dataSite.addMouse(mouse, dataPlane, 0, 2, 3, 4)
	dataSite.addKeyboard(keyboard)
	
	VR.site = {editSite, dataSite}
	
	# setup menu bar add
	addPlane = VR.Geometry('add')
	addPlane.setPrimitive('Plane 1.2 0.4 1 1')
	material = VR.Material('gui')
	material.setLit(False)
	addPlane.setMaterial(material)
	addPlane.setFrom(1.1, 0.2, 0)
	addPlane.setUp(0,-1,0)
	addPlane.setPickable(False)
	addPlane.addTag('add')	
	
	addSite = VR.CEF()
	addSite.setMaterial(addPlane.getMaterial())
	addSite.open('http://localhost:5500/add')
	
	VR.view_root.addChild(addPlane)
	addSite.addMouse(mouse, addPlane, 0, 2, 3, 4)
	addSite.addKeyboard(keyboard)
	
	VR.site = {editSite, dataSite, addSite}
		
	
</core>
      <arg type="VRPyDeviceType" value="keyboard" name_suffix="0" base_name="keyboard" name_space="init"/>
      <arg type="VRPyDeviceType" value="mouse" name_suffix="0" base_name="mouse" name_space="init"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="navi_do" name_space="__script__" type="Python" mobile="">
      <core>
	m = dev.getMessage()
	print m
</core>
      <trig type="on_device" dev="mobile" state="Released" param="" key="-1" name_suffix="0" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="mobile" state="Pressed" param="" key="-1" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.782254 0.782254 0.782254" format=".png" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
